---
#########################
#########################
## Deploy Docker Image ##
#########################
#########################

#
# Documentation:
# https://help.github.com/en/articles/workflow-syntax-for-github-actions
#

#######################################
# Start the job on all push to main #
#######################################
name: "Build & Deploy - RELEASE"
on:
  release:
    # Want to run the automation when a release is created
    types: ["created"]
    paths:
      - "Dockerfile"
      - "megalinter/**"
      - "mega-linter-runner/**"
      - "flavors/**"
      - "**/linter-versions.json"

###############
# Set the Job #
###############
jobs:
  build:
    # Name the Job
    name: Deploy Docker Image - RELEASE
    # Set the agent to run on
    runs-on: ubuntu-latest
    # Only run on main repo
    if: github.repository == 'megalinter/megalinter' && !contains(github.event.head_commit.message, 'skip deploy')
    environment: 
      name: latest
    ##################
    # Load all steps #
    ##################
    steps:
      ##########################
      # Checkout the code base #
      ##########################
      - name: Checkout Code
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      ########################################################
      # Publish updated version of mega-linter-runner on NPM #
      ########################################################
      - uses: actions/setup-node@v2.5.1
        with:
          node-version: "12.x"
          registry-url: "https://registry.npmjs.org"
      - run: cd mega-linter-runner && npm install
      - run: cd mega-linter-runner && npm publish || echo "mega-linter-runner not published"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      ###################################
      # Run Deploy script for Dockerhub #
      ###################################
      - name: Deploy Release image to Dockerhub
        env:
          # Set the Env Vars
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_REPO: megalinter/megalinter
          IMAGE_VERSION: ${{ github.event.release.tag_name }}
          DOCKERFILE_PATH: Dockerfile
          REGISTRY: Docker
        shell: bash
        run: .automation/upload-docker.sh

      ###################################################
      # Run Deploy script for GitHub Container Registry #
      ###################################################
      - name: Deploy Release image to GitHub Container Registry
        env:
          # Set the Env Vars
          GCR_USERNAME: ${{ secrets.GCR_USERNAME }}
          GCR_TOKEN: ${{ secrets.GCR_PASSWORD }}
          IMAGE_REPO: megalinter/megalinter
          IMAGE_VERSION: ${{ github.event.release.tag_name }}
          DOCKERFILE_PATH: Dockerfile
          REGISTRY: GCR
        shell: bash
        run: .automation/upload-docker.sh

      # Free disk space
      - name: Free Disk space
        shell: bash
        run: |
          sudo rm -rf /usr/local/lib/android  # will release about 10 GB if you don't need Android
          sudo rm -rf /usr/share/dotnet # will release about 20GB if you don't need .NET

      ##############################################
      # Check Docker image security with Trivy #
      ##############################################
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.2.1
        with:
          image-ref: "docker.io/megalinter/megalinter:${{ github.event.release.tag_name }}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
          timeout: 5m0s

  deploy_doc:
    runs-on: ubuntu-latest
    needs: build
    if: github.repository == 'megalinter/megalinter'
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0
      - name: Get release version
        id: version
        run: |
          echo "::set-output name=cversion::$(git describe --tags --match='v*' --abbrev=0 | cut -c2-)"
          echo "::set-output name=ctag::$(git describe --tags --match='v*' --abbrev=0)"
          echo "::set-output name=pversion::$(git describe --abbrev=0 --match='v*' --tags $(git rev-list --tags --skip=1 --max-count=1) | cut -c2-)"
          echo "::set-output name=ptag::$(git describe --abbrev=0 --match='v*' --tags $(git rev-list --tags --skip=1 --max-count=1))"
      - name: Print tags
        run: |
          echo "prev tag ${{ steps.version.outputs.ptag }}"
          echo "curr tag ${{ steps.version.outputs.ctag }}"
          echo "prev ver ${{ steps.version.outputs.pversion }}"
          echo "curr ver ${{ steps.version.outputs.cversion }}"
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - run: pip install mike mkdocs-material mdx_truly_sane_lists json-schema-for-humans
      - run: cd .automation && bash build_schemas_doc.sh && cd ..
      # - run: mkdocs gh-deploy --force
      - run: |
          git config --global user.name megalinter-bot
          git config --global user.email megalinter@megalinter.com
          git stash
      - name: Checkout previous tag
        run: |
          git checkout ${{ steps.version.outputs.ptag }}
      - name: Mike deploy previous version
        run: |
          mike delete ${{ steps.version.outputs.pversion }} || echo 'version does not exists yet'
          mike deploy ${{ steps.version.outputs.pversion }}
      - name: Checkout current tag
        run: |
          git checkout ${{ steps.version.outputs.ctag }}
      - name: Mike deploy current version
        #todov6 : replace v5 by v6
        run: |
          mike delete latest
          mike delete v5 || true
          mike deploy v5 || true
          mike deploy --push latest ${{ steps.version.outputs.cversion }}

  git-sync:
    runs-on: ubuntu-latest
    needs: deploy_doc
    steps:
      - name: git-sync
        uses: wei/git-sync@v3
        with:
          source_repo: "megalinter/megalinter"
          source_branch: "gh-pages"
          destination_repo: "git@github.com:megalinter/megalinter.github.io.git"
          destination_branch: "gh-pages"
          # ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }} # optional
          # source_ssh_private_key: ${{ secrets.SOURCE_SSH_PRIVATE_KEY }} # optional, will override `SSH_PRIVATE_KEY`
          destination_ssh_private_key: ${{ secrets.MEGALINTER_GITHUB_IO_SSH_PRIVATE_KEY }} # optional, will override `SSH_PRIVATE_KEY`
 
